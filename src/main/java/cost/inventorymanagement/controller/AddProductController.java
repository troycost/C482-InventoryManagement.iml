package cost.inventorymanagement.controller;

import java.io.IOException;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;

import cost.inventorymanagement.model.Part;
import cost.inventorymanagement.model.*;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;

/**
 * The AddProduct Controller class provides the control for the add product screen.
 */
public class AddProductController implements Initializable {

    @FXML
    private AnchorPane partName;
    @FXML
    private Label addProductLabel;
    @FXML
    private Label idPartLabel;
    @FXML
    private Label nameProductLabel;
    @FXML
    private Label productInStockLabel;
    @FXML
    private Label productPriceLabel;
    @FXML
    private Label maxLabel;
    @FXML
    private Button addProductFormButton;
    @FXML
    private Button saveButton;
    @FXML
    private Button removeAssocPartButton;
    @FXML
    private Button cancelButton;
    @FXML
    private TextField addPartSearchTxtFld;
    @FXML
    private TextField productPriceTxtFld;
    @FXML
    private TextField productNameTxtFld;
    @FXML
    private TextField productInStockTxtFld;
    @FXML
    private TextField inStockMaxTxtFld;
    @FXML
    private TextField inStockMinTxtFld;
    /**
     * The autoGenerated ID
     */
    @FXML
    private TextField autoGeneratedIDTxtFld;

    /**
     * The associated parts table part id column
     */
    @FXML
    private TableColumn<Part, Integer> associatedPartIDColumn;

    @FXML
    private TableColumn<Part, String> associatedPartNameColumn;
    /**
     * The associated parts table inventory level column
     */
    @FXML
    private TableColumn<Part, Integer> associatedInvLevelColumn;

    /**
     * The associated parts table price or cost column
     */
    @FXML
    private TableColumn<Part, Double> associatedPriceCostPerUnitColumn;

    /**
     * The associated parts tableview for the associated parts table
     */
    @FXML
    private TableView<Part> associatedPartTableView;

    /**
     * The part inventory or stock level column
     */
    @FXML
    private TableColumn<Part, Integer> invLevelColumn;


    /**
     * The part price or cost  column
     */
    @FXML
    private TableColumn<Part, Double> priceCostPerUnitColumn;

    /**
     * The part name column
     */
    @FXML
    private TableColumn<Part, String> partNameColumn;
    /**
     * The part ID column
     */
    @FXML
    private TableColumn<Part, Integer> partIDColumn;
    /**
     * The table view for the add product table
     */
    @FXML
    private TableView<Part> addPartTableView;

    /**
     * The part selected in the main controller is passed to the add product controller
     *
     * @param part
     */
    public void sendPartsToProduct(Part part) {
        if (part != null) {
            Product sendPart = new Product(part.getId(), part.getName(), part.getPrice(), part.getStock(), part.getMin(), part.getMax());
            productNameTxtFld.setText(sendPart.getName());
            productInStockTxtFld.setText(String.valueOf(part.getStock()));
            productPriceTxtFld.setText(String.valueOf(part.getPrice()));
            inStockMaxTxtFld.setText(String.valueOf(part.getMax()));
            inStockMinTxtFld.setText(String.valueOf(part.getMin()));
        }

    }

    /**
     * This method will allow the user to search for a part by name or ID.
     *
     * @param actionEvent The action event will add the product to the associate part's table.
     */
    public void onAddPartProdSearch(ActionEvent actionEvent) {

        String searchPartsString = addPartSearchTxtFld.getText();
        if (searchPartsString.isBlank()) {
            addPartTableView.setItems(Inventory.getAllParts());
        } else {
            try {
                Part part = Inventory.lookupPart(Integer.parseInt(searchPartsString));
                if (part != null) {
                    addPartTableView.getSelectionModel().select(part);
                } else {
                    throw new NumberFormatException();
                }
            } catch (NumberFormatException e) {
                ObservableList<Part> partsLocated = Inventory.lookupPart(searchPartsString);

                if (partsLocated.size() > 0) {
                    addPartTableView.setItems(partsLocated);

                } else {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error");
                    alert.setHeaderText("uh oh, there was an error!");
                    alert.setContentText("Please enter a valid part ID or name.");
                    alert.showAndWait();
                    addPartTableView.setItems(Inventory.getAllParts());
                }
            }
        }
    }

    /**
     * The associated parts list
     */
    private final ObservableList<Part> associatedParts = FXCollections.observableArrayList();

    /**
     * The min valid method will top a user from entering in invalid values for min and max text fields
     *
     * @param min
     * @param max
     * @return
     */
    private boolean minValid(int min, int max) {

        boolean isValid = true;

        if (min <= 0 || min >= max) {
            isValid = false;
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText("uh oh, there was an error!");
            alert.setContentText("Please enter a valid min and max number.\nThe min number can not be higher than the max number.");

            alert.showAndWait();
        }

        return isValid;
    }

    /**
     * The inventory valid method will stop a user from entering invalid values for the stock(inventory level) text fields.
     *
     * @param min
     * @param max
     * @param stock
     * @return
     */
    private boolean inventoryValid(int min, int max, int stock) {

        boolean isValid = true;

        if (stock < min || stock > max) {
            isValid = false;
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText("uh oh, there was an error!");
            alert.setContentText("Please enter an inventory value that is between the min and max values..");

            alert.showAndWait();
        }

        return isValid;
    }

    /**
     * The user is able to select the part in the parts table to be added to the associated parts to table.
     *
     * @param actionEvent
     */
    @FXML
    void onAddPart(ActionEvent actionEvent) {
        Part selectedPart = addPartTableView.getSelectionModel().getSelectedItem();

        if (selectedPart == null) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText("uh oh, there was an error!");
            alert.setContentText("Please select a part to add to the associate parts table.");
            alert.showAndWait();

        } else {

            associatedParts.add(selectedPart);
            associatedPartTableView.setItems(associatedParts);

        }

    }

    /**
     * This method allows the users to remove the associated part that was added
     *
     * @param actionEvent
     */
    @FXML
    void onRemoveAssocPart(ActionEvent actionEvent) {

        Part selectedPart = associatedPartTableView.getSelectionModel().getSelectedItem();

        if (selectedPart == null) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText("uh oh, there was an error!");
            alert.setContentText("Please select a part to delete.");

            alert.showAndWait();

        } else {

            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Alert");
            alert.setContentText("Are you sure you want to delete the selected Part?");
            Optional<ButtonType> result = alert.showAndWait();

            if (result.isPresent() && result.get() == ButtonType.OK) {
                associatedParts.remove(selectedPart);
                associatedPartTableView.setItems(associatedParts);
            }
        }
    }

    /**
     * The user is able to cancel their request and return to the main screen
     *
     * @param actionEvent
     */
    @FXML
    void onCancel(ActionEvent actionEvent) throws IOException {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Confirmation");
        alert.setHeaderText("Cancellation Request");
        alert.setContentText("Are you sure you want to cancel?");
        Optional<ButtonType> result = alert.showAndWait();

        if (result.isPresent() && result.get() == ButtonType.OK) {
            Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
            stage.close();
            
        }

    }

    /**
     * The modification of a product is saved and the data in the text fields are validated.
     *
     * @param event
     */
    @FXML
    void onSave(ActionEvent event) {

        try {
            int id = 0;
            String name = productNameTxtFld.getText();
            double price = Double.parseDouble(productPriceTxtFld.getText());
            int stock = Integer.parseInt(productInStockTxtFld.getText());
            int min = Integer.parseInt(inStockMinTxtFld.getText());
            int max = Integer.parseInt(inStockMaxTxtFld.getText());
            if ((!minValid(min, max)) || (!inventoryValid(min, max, stock))) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("uh oh, there was an error!");
                alert.setContentText("Please validate your input. \n The inventory level value needs to be between the minimum and maximum text field values.");

            } else {
                Inventory.addProduct(new Product(Inventory.getProductID(), name, price, stock, min, max));
                Parent root = FXMLLoader.load(getClass().getResource("/cost/inventorymanagement/mainForm.fxml"));
                Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
                stage.setTitle("Inventory Management");
                stage.setScene(new Scene(root));
                stage.show();
            }

        } catch (NumberFormatException e) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText("uh oh, there was an error!");
            alert.setContentText("Please enter only numbers in the max, min, inv, and price fields.");
            alert.showAndWait();
        } catch (Exception e) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText("uh oh, there was an error!");
            alert.setContentText("Please validate your input.");
        }
    }

    /**
     * Populate table data during upload to the parts' and associated parts' table in the add product scene
     *
     * @param url
     * @param resourceBundle
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        addPartTableView.setItems(Inventory.getAllParts());
        partNameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        priceCostPerUnitColumn.setCellValueFactory(new PropertyValueFactory<>("price"));
        invLevelColumn.setCellValueFactory(new PropertyValueFactory<>("stock"));
        partIDColumn.setCellValueFactory(new PropertyValueFactory<>("id"));

//      Populating the data for the associates parts table

        associatedPartIDColumn.setCellValueFactory(new PropertyValueFactory<>("id"));
        associatedPartNameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        associatedInvLevelColumn.setCellValueFactory(new PropertyValueFactory<>("stock"));
        associatedPriceCostPerUnitColumn.setCellValueFactory(new PropertyValueFactory<>("price"));
    }
}
